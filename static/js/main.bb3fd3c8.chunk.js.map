{"version":3,"sources":["serviceWorker.js","contacts/contacts.js","index.js"],"names":["Boolean","window","location","hostname","match","contactsMock","firstName","lastName","phone","gender","getMFIcon","str","sign","Contacts","state","contacts","filtered","search","isMale","isFemale","isUnisex","a","setState","filterData","handleSearchChange","ev","target","value","searchLwr","toLowerCase","fltr","filter","man","undefined","item","includes","console","log","className","type","placeholder","this","onChange","id","name","checked","map","cnt","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb3fd3c8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport \"./contacts.css\";\r\n\r\nconst contactsMock = [{\r\n  firstName: \"Барней\",\r\n  lastName: \"Стинсовський\",\r\n  phone: \"+380956319521\",\r\n  gender: \"male\"\r\n}, {\r\n  firstName: \"Робін\",\r\n  lastName: \"Щербатська\",\r\n  phone: \"+380931460123\",\r\n  gender: \"female\"\r\n}, {\r\n  firstName: \"Анонімний\",\r\n  lastName: \"Анонімус\",\r\n  phone: \"+380666666666\"\r\n}, {\r\n  firstName: \"Лілія\",\r\n  lastName: \"Олдровна\",\r\n  phone: \"+380504691254\",\r\n  gender: \"female\"\r\n}, {\r\n  firstName: \"Маршен\",\r\n  lastName: \"Еріксонян\",\r\n  phone: \"+380739432123\",\r\n  gender: \"male\"\r\n}, {\r\n  firstName: \"Теодор\",\r\n  lastName: \"Мотсбес\",\r\n  phone: \"+380678123456\",\r\n  gender: \"male\"\r\n}];\r\n\r\nfunction getMFIcon(str) {\r\n  let sign = \"\";\r\n  switch (str) {\r\n    case 'male': sign = \"\\u2642\"; break;\r\n    case 'female': sign = \"\\u2640\"; break;\r\n  }\r\n  return sign;\r\n}\r\n\r\nexport default class Contacts extends Component {\r\n  state = {\r\n    contacts: [...contactsMock], \r\n    filtered: [...contactsMock],\r\n    search: '',\r\n    isMale: true,\r\n    isFemale: true,\r\n    isUnisex: true\r\n  };\r\n\r\n  isMale = async() => {\r\n    await this.setState( {isMale: !this.state.isMale});\r\n    this.filterData();\r\n  };\r\n\r\n  isFemale = async() => {\r\n    await this.setState({ isFemale: !this.state.isFemale });\r\n    this.filterData();\r\n  };\r\n\r\n  isUnisex = async() => {\r\n    await this.setState({ isUnisex: !this.state.isUnisex });\r\n    this.filterData();\r\n  };\r\n\r\n  handleSearchChange = async (ev) => {\r\n    await this.setState({search: ev.target.value});\r\n    this.filterData();\r\n  };\r\n\r\n  filterData = async() => {\r\n    await this.setState(() => {\r\n      const searchLwr = this.state.search.toLowerCase();\r\n      const fltr = this.state.contacts.filter(man =>\r\n        ((man.gender === 'male') && this.state.isMale) ||\r\n        ((man.gender === 'female') && this.state.isFemale) ||\r\n        ((man.gender === undefined) && this.state.isUnisex))\r\n        .filter(item =>\r\n          item.firstName.toLowerCase().includes(searchLwr) ||\r\n          item.lastName.toLowerCase().includes(searchLwr) ||\r\n          item.phone.toLowerCase().includes(searchLwr) );\r\n      console.log(fltr);\r\n      return {\r\n        filtered: [...fltr],\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"bg\">\r\n        <div className=\"container\">\r\n          <div className=\"search\">\r\n            <input className=\"search__btn\" type=\"search\" placeholder=\"Search...\" value={this.state.search}\r\n                   onChange={this.handleSearchChange}>\r\n            </input>\r\n            <label className=\"check\" id=\"man\" onChange={this.isMale}>\r\n              <input type=\"checkbox\" name=\"man\" checked={this.state.isMale}></input>\r\n              ♂\r\n            </label>\r\n            <label className=\"check\" id=\"woman\" onChange={this.isFemale}>\r\n              <input type=\"checkbox\" name=\"woman\" checked={this.state.isFemale}></input>\r\n              ♀\r\n            </label>\r\n            <label className=\"check\" id=\"unisex\" onChange={this.isUnisex}>\r\n              <input type=\"checkbox\" name=\"unisex\" checked={this.state.isUnisex}></input>\r\n              undefined\r\n            </label>\r\n          </div>\r\n          <div className=\"header\">\r\n            <span className=\"name\">First Name</span>\r\n            <span className=\"name\">Last Name</span>\r\n            <span className=\"phone\">Phone</span>\r\n            <span className=\"sex\">Sex</span>\r\n          </div>\r\n            { this.state.filtered.map((cnt) => (\r\n              <div className=\"contacts\">\r\n                <span className=\"name\">{cnt.firstName}</span>\r\n                <span className=\"name\">{cnt.lastName}</span>\r\n                <span className=\"phone\">{cnt.phone}</span>\r\n                <span className=\"sex\">{getMFIcon(cnt.gender)}</span>  {/*  ♀ ♂ ⚲ ♂ ♀ 👩 👨 */}\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Contacts from './contacts/contacts';\r\n\r\nReactDOM.render(\r\n    <Contacts />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}